{"version":3,"sources":["warble.js","warble.min.js"],"names":["root","factory","define","amd","exports","module","warble","specificTypes","testRegExp","regexp","test","value","Core","re","email","numeric","positive","negative","isNumeric","subtypes","integer","Number","isInteger","even","odd","validations","required","isRequired","undefined","pattern","core","is","RegExp","min","Infinity","max","minlength","length","maxlength","type","types","range","Error","equal","to","conditional","options","find","current","instance","object","toString","call","getDetails","index","size","response","Response","data","valid","ResponseFragment","status","name","param","parent","toUpperCase","substr","Model","model","responseFragment","modelFragment","setData","validate","validation","Warble"],"mappings":"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","file":"warble.min.js","sourcesContent":["{\r\n\r\n\tlet\r\n\r\n\t\tspecificTypes = {\r\n\t\t\t'[object Array]': 'array',\r\n\t\t\t'[object Boolean]': 'boolean',\r\n\t\t\t'[object Date]': 'date',\r\n\t\t\t'[object Error]': 'error',\r\n\t\t\t'[object Function]': 'function',\r\n\t\t\t'[object Null]': 'null',\r\n\t\t\t'[object Number]': 'number',\r\n\t\t\t'[object Object]': 'object',\r\n\t\t\t'[object RegExp]': 'regexp',\r\n\t\t\t'[object String]': 'string',\r\n\t\t\t'[object Symbol]': 'symbol'\r\n\t\t};\r\n\r\n\tconst testRegExp = regexp => value => regexp.test(value);\r\n\r\n\tclass Core {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tvar\r\n\r\n\t\t\t\tre = this.re = {\r\n\t\t\t\t\temail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/, // https://www.w3.org/TR/html5/forms.html#e-mail-state-(type=email)\r\n\t\t\t\t\tnumeric: /^\\-?\\d+(?:\\.\\d+)?$/,\r\n\t\t\t\t\tpositive: /^\\d+(?:\\.\\d+)?$/,\r\n\t\t\t\t\tnegative: /^\\-\\d+(?:\\.\\d+)?$/\r\n\t\t\t\t},\r\n\r\n\t\t\t\tisNumeric = testRegExp(re.numeric);\r\n\r\n\t\t\tthis.subtypes = {\r\n\t\t\t\temail: testRegExp(re.email),\r\n\t\t\t\tpositive: testRegExp(re.positive),\r\n\t\t\t\tnegative: testRegExp(re.negative),\r\n\t\t\t\tnumeric: isNumeric,\r\n\t\t\t\tinteger: value => isNumeric(value) ? Number.isInteger(Number(value)) : false,\r\n\t\t\t\teven: value =>  isNumeric(value) ? value % 2 === 0 : false,\r\n\t\t\t\todd: value =>  isNumeric(value) ? (value < 0 ? (value * -1) : value) % 2 > 0 : false\r\n\t\t\t};\r\n\r\n\t\t\tthis.validations = {\r\n\t\t\t\trequired: (value, isRequired) => isRequired ? value !== undefined : true,\r\n\t\t\t\tpattern: (value, pattern) => (core.is(pattern, 'regexp') ? pattern : new RegExp(pattern)).test(value),\r\n\t\t\t\tmin: (value, min = -Infinity) => value >= min,\r\n\t\t\t\tmax: (value, max = Infinity) => value <= max,\r\n\t\t\t\tminlength: (value, min = 0) => typeof value === 'string' ? value.length >= min : false,\r\n\t\t\t\tmaxlength: (value, max = Infinity) => typeof value === 'string' ? value.length <= max : false,\r\n\t\t\t\ttype: (value, type) => core.type(value) === type,\r\n\t\t\t\tis: (value, types) => core.is(value, types, true),\r\n\t\t\t\trange(value, range) {\r\n\r\n\t\t\t\t\tif (core.is(range, 'array') && range.length > 1)\r\n\r\n\t\t\t\t\t\treturn value >= range[0] && value <= range[1];\r\n\r\n\t\t\t\t\tthrow new Error('The range is invalid.');\r\n\r\n\t\t\t\t},\r\n\t\t\t\tequal(value, to) {\r\n\r\n\t\t\t\t\treturn value === this[to];\r\n\r\n\t\t\t\t},\r\n\t\t\t\tconditional: (value, conditional) => conditional(value),\r\n\t\t\t\toptions: (value, options) => !!options.find(current => current === value),\r\n\t\t\t\tinstance: (value, object) => value instanceof object\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\ttype(value) {\r\n\r\n\t\t\treturn value === null ? 'null' : (/object|function/.test(typeof value) ? specificTypes[specificTypes.toString.call(value)] || 'object' : typeof value);\r\n\r\n\t\t}\r\n\r\n\t\tis(value, types, getDetails) {\r\n\r\n\t\t\tvar\r\n\r\n\t\t\t\tresponse = {},\r\n\r\n\t\t\t\t{ subtypes, type } = this;\r\n\r\n\t\t\tif (type(types) === 'array') {\r\n\r\n\t\t\t\tfor (let index = 0, size = types.length; index < size; index++) {\r\n\r\n\t\t\t\t\tlet test = subtypes[types[index]];\r\n\r\n\t\t\t\t\tresponse[types[index]] = typeof test === 'function' ? test.call(this, value) : type(value) === types[index];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (typeof subtypes[types] === 'function')\r\n\r\n\t\t\t\tresponse[types] = subtypes[types].call(this, value);\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tresponse[types] = type(value) === types;\r\n\r\n\t\t\tif (getDetails)\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\tfor (let index in response)\r\n\r\n\t\t\t\tif (!response[index])\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlet core = new Core;\r\n\r\n\tclass Response {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tthis.data = {};\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t}\r\n\r\n\t\tsetData(index, value) {\r\n\r\n\t\t\tthis.data[index] = value;\r\n\r\n\t\t\tif (!value.valid)\r\n\r\n\t\t\t\tthis.valid = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass ResponseFragment {\r\n\r\n\t\tconstructor(value) {\r\n\r\n\t\t\tthis.value = value;\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t\tthis.status = {};\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(name, param, parent) {\r\n\r\n\t\t\tif (typeof core.validations[name] === 'function')\r\n\r\n\t\t\t\tvar response = core.validations[name].call(parent, this.value, param);\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tthrow new Error(`\"${name}\" is not a recognized validation function.`);\r\n\r\n\t\t\tif (typeof response === 'object') {\r\n\r\n\t\t\t\tlet status = true;\r\n\r\n\t\t\t\tfor (let index in response) {\r\n\r\n\t\t\t\t\tthis.status[name + index[0].toUpperCase() + index.substr(1)] = response[index];\r\n\r\n\t\t\t\t\tif (!response[index]) {\r\n\r\n\t\t\t\t\t\tthis.valid = false;\r\n\r\n\t\t\t\t\t\tstatus = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.status[name] = status;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (!response)\r\n\r\n\t\t\t\t\tthis.valid = false;\r\n\r\n\t\t\t\tthis.status[name] = response;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Model {\r\n\r\n\t\tconstructor(model) {\r\n\r\n\t\t\tif (typeof model === 'object')\r\n\r\n\t\t\t\tthis.model = model;\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(data) {\r\n\r\n\t\t\tif (typeof data === 'object') {\r\n\r\n\t\t\t\tlet response = new Response;\r\n\r\n\t\t\t\tfor (let index in this.model) {\r\n\r\n\t\t\t\t\tlet\r\n\r\n\t\t\t\t\t\tresponseFragment = new ResponseFragment(data[index]),\r\n\r\n\t\t\t\t\t\tmodelFragment = this.model[index];\r\n\r\n\t\t\t\t\tif (modelFragment instanceof Model)\r\n\r\n\t\t\t\t\t\tresponse.setData(index, modelFragment.validate(data[index]));\r\n\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\tfor (let validation in modelFragment)\r\n\r\n\t\t\t\t\t\t\tresponseFragment.validate(validation, modelFragment[validation], data);\r\n\r\n\t\t\t\t\t\tresponse.setData(index, responseFragment);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Warble extends Core {\r\n\r\n\t\tmodel(model) {\r\n\r\n\t\t\treturn new Model(model);\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(value, options) {\r\n\r\n\t\t\tif (typeof options === 'object') {\r\n\r\n\t\t\t\tvar value = new ResponseFragment(value);\r\n\r\n\t\t\t\tfor (let index in options)\r\n\r\n\t\t\t\t\tvalue.validate(index, options[index]);\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar warble = new Warble;\r\n\r\n}\r\n",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.warble = factory();\n  }\n}(this, function() {\n{\r\n\r\n\tlet\r\n\r\n\t\tspecificTypes = {\r\n\t\t\t'[object Array]': 'array',\r\n\t\t\t'[object Boolean]': 'boolean',\r\n\t\t\t'[object Date]': 'date',\r\n\t\t\t'[object Error]': 'error',\r\n\t\t\t'[object Function]': 'function',\r\n\t\t\t'[object Null]': 'null',\r\n\t\t\t'[object Number]': 'number',\r\n\t\t\t'[object Object]': 'object',\r\n\t\t\t'[object RegExp]': 'regexp',\r\n\t\t\t'[object String]': 'string',\r\n\t\t\t'[object Symbol]': 'symbol'\r\n\t\t};\r\n\r\n\tconst testRegExp = regexp => value => regexp.test(value);\r\n\r\n\tclass Core {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tvar\r\n\r\n\t\t\t\tre = this.re = {\r\n\t\t\t\t\temail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/, // https://www.w3.org/TR/html5/forms.html#e-mail-state-(type=email)\r\n\t\t\t\t\tnumeric: /^\\-?\\d+(?:\\.\\d+)?$/,\r\n\t\t\t\t\tpositive: /^\\d+(?:\\.\\d+)?$/,\r\n\t\t\t\t\tnegative: /^\\-\\d+(?:\\.\\d+)?$/\r\n\t\t\t\t},\r\n\r\n\t\t\t\tisNumeric = testRegExp(re.numeric);\r\n\r\n\t\t\tthis.subtypes = {\r\n\t\t\t\temail: testRegExp(re.email),\r\n\t\t\t\tpositive: testRegExp(re.positive),\r\n\t\t\t\tnegative: testRegExp(re.negative),\r\n\t\t\t\tnumeric: isNumeric,\r\n\t\t\t\tinteger: value => isNumeric(value) ? Number.isInteger(Number(value)) : false,\r\n\t\t\t\teven: value =>  isNumeric(value) ? value % 2 === 0 : false,\r\n\t\t\t\todd: value =>  isNumeric(value) ? (value < 0 ? (value * -1) : value) % 2 > 0 : false\r\n\t\t\t};\r\n\r\n\t\t\tthis.validations = {\r\n\t\t\t\trequired: (value, isRequired) => isRequired ? value !== undefined : true,\r\n\t\t\t\tpattern: (value, pattern) => (core.is(pattern, 'regexp') ? pattern : new RegExp(pattern)).test(value),\r\n\t\t\t\tmin: (value, min = -Infinity) => value >= min,\r\n\t\t\t\tmax: (value, max = Infinity) => value <= max,\r\n\t\t\t\tminlength: (value, min = 0) => typeof value === 'string' ? value.length >= min : false,\r\n\t\t\t\tmaxlength: (value, max = Infinity) => typeof value === 'string' ? value.length <= max : false,\r\n\t\t\t\ttype: (value, type) => core.type(value) === type,\r\n\t\t\t\tis: (value, types) => core.is(value, types, true),\r\n\t\t\t\trange(value, range) {\r\n\r\n\t\t\t\t\tif (core.is(range, 'array') && range.length > 1)\r\n\r\n\t\t\t\t\t\treturn value >= range[0] && value <= range[1];\r\n\r\n\t\t\t\t\tthrow new Error('The range is invalid.');\r\n\r\n\t\t\t\t},\r\n\t\t\t\tequal(value, to) {\r\n\r\n\t\t\t\t\treturn value === this[to];\r\n\r\n\t\t\t\t},\r\n\t\t\t\tconditional: (value, conditional) => conditional(value),\r\n\t\t\t\toptions: (value, options) => !!options.find(current => current === value),\r\n\t\t\t\tinstance: (value, object) => value instanceof object\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\ttype(value) {\r\n\r\n\t\t\treturn value === null ? 'null' : (/object|function/.test(typeof value) ? specificTypes[specificTypes.toString.call(value)] || 'object' : typeof value);\r\n\r\n\t\t}\r\n\r\n\t\tis(value, types, getDetails) {\r\n\r\n\t\t\tvar\r\n\r\n\t\t\t\tresponse = {},\r\n\r\n\t\t\t\t{ subtypes, type } = this;\r\n\r\n\t\t\tif (type(types) === 'array') {\r\n\r\n\t\t\t\tfor (let index = 0, size = types.length; index < size; index++) {\r\n\r\n\t\t\t\t\tlet test = subtypes[types[index]];\r\n\r\n\t\t\t\t\tresponse[types[index]] = typeof test === 'function' ? test.call(this, value) : type(value) === types[index];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (typeof subtypes[types] === 'function')\r\n\r\n\t\t\t\tresponse[types] = subtypes[types].call(this, value);\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tresponse[types] = type(value) === types;\r\n\r\n\t\t\tif (getDetails)\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\tfor (let index in response)\r\n\r\n\t\t\t\tif (!response[index])\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlet core = new Core;\r\n\r\n\tclass Response {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tthis.data = {};\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t}\r\n\r\n\t\tsetData(index, value) {\r\n\r\n\t\t\tthis.data[index] = value;\r\n\r\n\t\t\tif (!value.valid)\r\n\r\n\t\t\t\tthis.valid = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass ResponseFragment {\r\n\r\n\t\tconstructor(value) {\r\n\r\n\t\t\tthis.value = value;\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t\tthis.status = {};\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(name, param, parent) {\r\n\r\n\t\t\tif (typeof core.validations[name] === 'function')\r\n\r\n\t\t\t\tvar response = core.validations[name].call(parent, this.value, param);\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tthrow new Error(`\"${name}\" is not a recognized validation function.`);\r\n\r\n\t\t\tif (typeof response === 'object') {\r\n\r\n\t\t\t\tlet status = true;\r\n\r\n\t\t\t\tfor (let index in response) {\r\n\r\n\t\t\t\t\tthis.status[name + index[0].toUpperCase() + index.substr(1)] = response[index];\r\n\r\n\t\t\t\t\tif (!response[index]) {\r\n\r\n\t\t\t\t\t\tthis.valid = false;\r\n\r\n\t\t\t\t\t\tstatus = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.status[name] = status;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (!response)\r\n\r\n\t\t\t\t\tthis.valid = false;\r\n\r\n\t\t\t\tthis.status[name] = response;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Model {\r\n\r\n\t\tconstructor(model) {\r\n\r\n\t\t\tif (typeof model === 'object')\r\n\r\n\t\t\t\tthis.model = model;\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(data) {\r\n\r\n\t\t\tif (typeof data === 'object') {\r\n\r\n\t\t\t\tlet response = new Response;\r\n\r\n\t\t\t\tfor (let index in this.model) {\r\n\r\n\t\t\t\t\tlet\r\n\r\n\t\t\t\t\t\tresponseFragment = new ResponseFragment(data[index]),\r\n\r\n\t\t\t\t\t\tmodelFragment = this.model[index];\r\n\r\n\t\t\t\t\tif (modelFragment instanceof Model)\r\n\r\n\t\t\t\t\t\tresponse.setData(index, modelFragment.validate(data[index]));\r\n\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\tfor (let validation in modelFragment)\r\n\r\n\t\t\t\t\t\t\tresponseFragment.validate(validation, modelFragment[validation], data);\r\n\r\n\t\t\t\t\t\tresponse.setData(index, responseFragment);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Warble extends Core {\r\n\r\n\t\tmodel(model) {\r\n\r\n\t\t\treturn new Model(model);\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(value, options) {\r\n\r\n\t\t\tif (typeof options === 'object') {\r\n\r\n\t\t\t\tvar value = new ResponseFragment(value);\r\n\r\n\t\t\t\tfor (let index in options)\r\n\r\n\t\t\t\t\tvalue.validate(index, options[index]);\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar warble = new Warble;\r\n\r\n}\r\n\nreturn warble;\n}));\n"]}