{"version":3,"sources":["warble.js"],"names":["specificTypes","testRegExp","regexp","test","value","isInteger","Number","forEach","toLowerCase","Core","re","email","numeric","positive","negative","subtypes","integer","even","odd","validations","required","isRequired","undefined","pattern","core","is","RegExp","min","Infinity","max","minlength","length","maxlength","type","types","range","equal","to","hasOwnProperty","conditional","options","find","current","instance","object","toString","call","getDetails","index","size","response","Response","data","valid","ResponseFragment","status","name","param","parent","toUpperCase","substr","Model","model","Error","setData","validate","validation","Warble","warble","module","exports"],"mappings":"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","file":"warble.min.js","sourcesContent":["{\r\n\r\n\tlet specificTypes = {};\r\n\r\n\tconst\r\n\r\n\t\ttestRegExp = regexp => value => regexp.test(value),\r\n\r\n\t\tisInteger = value => Number.isInteger(Number(value));\r\n\r\n\t[\r\n\t\t'Array',\r\n\t\t'Boolean',\r\n\t\t'Date',\r\n\t\t'Error',\r\n\t\t'Function',\r\n\t\t'Number',\r\n\t\t'Object',\r\n\t\t'RegExp',\r\n\t\t'String',\r\n\t\t'Symbol'\r\n\t]\r\n\r\n\t\t.forEach(value => specificTypes[`[object ${value}]`] = value.toLowerCase());\r\n\r\n\tclass Core {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tvar\r\n\r\n\r\n\t\t\t\tre = this.re = {\r\n\t\t\t\t\temail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/, // https://www.w3.org/TR/html5/forms.html#e-mail-state-(type=email)\r\n\t\t\t\t\tnumeric: /^\\-?\\d+(?:\\.\\d+)?$/,\r\n\t\t\t\t\tpositive: /^\\d+(?:\\.\\d+)?$/,\r\n\t\t\t\t\tnegative: /^\\-\\d+(?:\\.\\d+)?$/\r\n\t\t\t\t};\r\n\r\n\t\t\tthis.subtypes = {\r\n\t\t\t\temail: testRegExp(re.email),\r\n\t\t\t\tpositive: testRegExp(re.positive),\r\n\t\t\t\tnegative: testRegExp(re.negative),\r\n\t\t\t\tnumeric: testRegExp(re.numeric),\r\n\t\t\t\tinteger: isInteger,\r\n\t\t\t\teven: value => value % 2 === 0,\r\n\t\t\t\todd: value => value % 2 > 0\r\n\t\t\t};\r\n\r\n\t\t\tthis.validations = {\r\n\t\t\t\trequired: (value, isRequired) => isRequired ? value !== undefined : true,\r\n\t\t\t\tpattern: (value, pattern) => (core.is(pattern, 'regexp') ? pattern : new RegExp(pattern)).test(value),\r\n\t\t\t\tmin: (value, min = -Infinity) => (Number(value) || 0) >= (Number(min) || 0),\r\n\t\t\t\tmax: (value, max = Infinity) => (Number(value) || 0) <= (Number(max) || 0),\r\n\t\t\t\tminlength: (value, min = 0) => typeof value === 'string' ? value.length >= (Number(min) || 0) : false,\r\n\t\t\t\tmaxlength: (value, max = Infinity) => typeof value === 'string' ? value.length <= (Number(max) || 0) : false,\r\n\t\t\t\ttype: (value, type) => core.type(value) === type,\r\n\t\t\t\tis: (value, types) => core.is(value, types, true),\r\n\t\t\t\trange: (value, range = [-Infinity, Infinity]) => (core.is(range, 'array') && range.length > 1) ? Number(value) >= Number(range[0]) && Number(value) <= Number(range[1]) : false,\r\n\t\t\t\tequal(value, to)  {\r\n\r\n\t\t\t\t\treturn typeof this === 'object' && this.hasOwnProperty(to) ? value === this[to] : false;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tconditional: (value, conditional) => conditional(value),\r\n\t\t\t\toptions: (value, options) => !!options.find(current => current === value),\r\n\t\t\t\tinstance: (value, object) => value instanceof object\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\ttype(value) {\r\n\r\n\t\t\treturn value === null ? 'null' : (typeof value === 'object' || typeof value === 'function' ? specificTypes[specificTypes.toString.call(value)] || 'object' : typeof value);\r\n\r\n\t\t}\r\n\r\n\t\tis(value, types, getDetails) {\r\n\r\n\t\t\tvar\r\n\r\n\t\t\t\tresponse = {},\r\n\r\n\t\t\t\t{ subtypes, type } = this;\r\n\r\n\t\t\tif (type(types) === 'array') {\r\n\r\n\t\t\t\tfor (let index = 0, size = types.length; index < size; index++) {\r\n\r\n\t\t\t\t\tlet test = subtypes[types[index]];\r\n\r\n\t\t\t\t\tresponse[types[index]] = typeof test === 'function' ? test.call(this, value) : type(value) === types[index];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (typeof subtypes[types] === 'function')\r\n\r\n\t\t\t\tresponse[types] = subtypes[types].call(this, value);\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tresponse[types] = type(value) === types;\r\n\r\n\t\t\tif (getDetails)\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\tfor (let index in response)\r\n\r\n\t\t\t\tif (!response[index])\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlet core = new Core;\r\n\r\n\tclass Response {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tthis.data = {};\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t}\r\n\r\n\t\tsetData(index, value) {\r\n\r\n\t\t\tthis.data[index] = value;\r\n\r\n\t\t\tif (!value.valid)\r\n\r\n\t\t\t\tthis.valid = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass ResponseFragment {\r\n\r\n\t\tconstructor(value) {\r\n\r\n\t\t\tthis.value = value;\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t\tthis.status = {};\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(name, param, parent) {\r\n\r\n\t\t\tvar response = typeof core.validations[name] === 'function' ? core.validations[name].call(parent, this.value, param) : true;\r\n\r\n\t\t\tif (!response)\r\n\r\n\t\t\t\tthis.valid = false;\r\n\r\n\t\t\tif (typeof response === 'object') {\r\n\r\n\t\t\t\tlet status = true;\r\n\r\n\t\t\t\tfor (let index in response) {\r\n\r\n\t\t\t\t\tthis.status[name + index[0].toUpperCase() + index.substr(1)] = response[index];\r\n\r\n\t\t\t\t\tif (!response[index])\r\n\r\n\t\t\t\t\t\tstatus = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.status[name] = status;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthis.status[name] = response;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Model {\r\n\r\n\t\tconstructor(model) {\r\n\r\n\t\t\tif (typeof model === 'object')\r\n\r\n\t\t\t\tthis.model = model;\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(data) {\r\n\r\n\t\t\tif (typeof data === 'object') {\r\n\r\n\t\t\t\tlet response = new Response;\r\n\r\n\t\t\t\tfor (let index in this.model) {\r\n\r\n\t\t\t\t\tlet value = new ResponseFragment(data[index]);\r\n\r\n\t\t\t\t\tif (this.model[index] instanceof Model)\r\n\r\n\t\t\t\t\t\tresponse.setData(index, this.model[index].validate(data[index]));\r\n\r\n\t\t\t\t\telse if (typeof this.model[index] === 'object') {\r\n\r\n\t\t\t\t\t\tfor (let validation in this.model[index])\r\n\r\n\t\t\t\t\t\t\tvalue.validate(validation, this.model[index][validation], data)\r\n\r\n\t\t\t\t\t\tresponse.setData(index, value);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Warble extends Core {\r\n\r\n\t\tmodel(model) {\r\n\r\n\t\t\treturn new Model(model);\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(value, options) {\r\n\r\n\t\t\tif (typeof options === 'object') {\r\n\r\n\t\t\t\tvar value = new ResponseFragment(value);\r\n\r\n\t\t\t\tfor (let index in options)\r\n\r\n\t\t\t\t\tvalue.validate(index, options[index]);\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow new Error('The expected param must be an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar warble = new Warble;\r\n\r\n\tif (typeof module === 'object' && typeof module.exports === 'object')\r\n\r\n\t\tmodule.exports = warble;\r\n\r\n}\r\n"]}