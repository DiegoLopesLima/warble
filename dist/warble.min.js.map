{"version":3,"sources":["warble.js"],"names":["objectTypes","typesReference","error","value","Error","index","size","length","toLowerCase","WarbleErrorList","errors","push","name","WarbleCore","fn","is","email","test","numeric","integer","positive","negative","even","Number","odd","validate","required","isRequired","undefined","pattern","core","RegExp","min","Infinity","max","minlength","maxlength","type","types","errorList","hasErrors","range","equal","to","hasOwnProperty","conditional","options","instance","object","toString","call","getErrorList","createErrorList","addError","WarbleFragment","valid","param","parent","response","WarbleResponse","data","status","WarbleModel","model","setResponse","validation","setValid","setData","Warble","warble","module","exports"],"mappings":"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","file":"warble.min.js","sourcesContent":["{\r\n\r\n\tlet\r\n\r\n\t\tobjectTypes = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error', 'Symbol'],\r\n\r\n\t\ttypesReference = {},\r\n\r\n\t\terror = (value) => new Error(value);\r\n\r\n\tfor (let index = 0, size = objectTypes.length; index < size; index++)\r\n\r\n\t\ttypesReference[`[object ${objectTypes[index]}]`] = objectTypes[index].toLowerCase();\r\n\r\n\tclass WarbleErrorList {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tthis.errors = [];\r\n\r\n\t\t}\r\n\r\n\t\taddError(error) {\r\n\r\n\t\t\tif (typeof error === 'string')\r\n\r\n\t\t\t\tthis.errors.push(error);\r\n\r\n\t\t\telse if (typeof error === 'function' && error.name)\r\n\r\n\t\t\t\tthis.errors.push(error.name);\r\n\r\n\t\t}\r\n\r\n\t\thasErrors() {\r\n\r\n\t\t\treturn this.errors.length > 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass WarbleCore {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tthis.fn = {\r\n\t\t\t\tis: {\r\n\t\t\t\t\t// https://www.w3.org/TR/html5/forms.html#e-mail-state-(type=email)\r\n\t\t\t\t\temail: (value) => /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value),\r\n\t\t\t\t\tnumeric: (value) => /^\\-?\\d+(?:\\.\\d+)?$/.test(value),\r\n\t\t\t\t\tinteger: (value) => /^\\-?\\d+$/.test(value),\r\n\t\t\t\t\tpositive: (value) => /^\\d+(?:\\.\\d+)?$/.test(value),\r\n\t\t\t\t\tnegative: (value) => /^\\-\\d+(?:\\.\\d+)?$/.test(value),\r\n\t\t\t\t\teven: (value) => (Number(value) % 2) === 0,\r\n\t\t\t\t\todd: (value) => (Number(value) % 2) > 0\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: {\r\n\t\t\t\t\trequired: (value, isRequired) => isRequired ? value !== undefined : true,\r\n\t\t\t\t\tpattern: (value, pattern) => (core.is(pattern, 'regexp') ? pattern : new RegExp(pattern)).test(value),\r\n\t\t\t\t\tmin: (value, min = -Infinity) => (Number(value) || 0) >= (Number(min) || 0),\r\n\t\t\t\t\tmax: (value, max = Infinity) => (Number(value) || 0) <= (Number(max) || 0),\r\n\t\t\t\t\tminlength: (value, min = 0) => typeof value === 'string' ? value.length >= (Number(min) || 0) : false,\r\n\t\t\t\t\tmaxlength: (value, max = Infinity) => typeof value === 'string' ? value.length <= (Number(max) || 0) : false,\r\n\t\t\t\t\ttype: (value, type) => core.type(value) === type,\r\n\t\t\t\t\tis(value, types) {\r\n\r\n\t\t\t\t\t\tvar errorList = core.is(value, types, true);\r\n\r\n\t\t\t\t\t\treturn errorList.hasErrors() ? errorList : true\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\trange: (value, range = [-Infinity, Infinity]) => (core.is(range, 'array') && range.length > 1) ? Number(value) >= Number(range[0]) && Number(value) <= Number(range[1]) : false,\r\n\t\t\t\t\tequal(value, to)  {\r\n\r\n\t\t\t\t\t\treturn typeof this === 'object' && this.hasOwnProperty(to) ? value === this[to] : false;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tconditional: (value, conditional) => conditional(value),\r\n\t\t\t\t\toptions(value, options) {\r\n\r\n\t\t\t\t\t\tif (core.is(options, 'array'))\r\n\r\n\t\t\t\t\t\t\tfor (let index = 0, size = options.length; index < size; index++)\r\n\r\n\t\t\t\t\t\t\t\tif (value === options[index])\r\n\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tinstance: (value, object) => value instanceof object\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\ttype(value) {\r\n\r\n\t\t\treturn value === null ? 'null' : (typeof value === 'object' || typeof value === 'function' ? typesReference[typesReference.toString.call(value)] || 'object' : typeof value);\r\n\r\n\t\t}\r\n\r\n\t\tis(value, types, getErrorList) {\r\n\r\n\t\t\tvar\r\n\r\n\t\t\t\terrorList = this.createErrorList(),\r\n\r\n\t\t\t\t{ fn, type } = this;\r\n\r\n\t\t\tif (type(types) === 'array') {\r\n\r\n\t\t\t\tfor (let index = 0, size = types.length; index < size; index++) {\r\n\r\n\t\t\t\t\tlet test = fn.is[types[index]];\r\n\r\n\t\t\t\t\tif (typeof test === 'function') {\r\n\r\n\t\t\t\t\t\tif (!test.call(this, value))\r\n\r\n\t\t\t\t\t\t\terrorList.addError(types[index]);\r\n\r\n\t\t\t\t\t} else if (!(type(value) === types[index]))\r\n\r\n\t\t\t\t\t\terrorList.addError(types[index]);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (typeof fn.is[types] === 'function') {\r\n\r\n\t\t\t\tif (!fn.is[types].call(this, value))\r\n\r\n\t\t\t\t\terrorList.addError(types);\r\n\r\n\t\t\t} else if (!(type(value) === types))\r\n\r\n\t\t\t\terrorList.addError(types);\r\n\r\n\t\t\treturn getErrorList ? errorList : !errorList.hasErrors();\r\n\r\n\t\t}\r\n\r\n\t\tcreateErrorList() {\r\n\r\n\t\t\treturn new WarbleErrorList;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlet core = new WarbleCore;\r\n\r\n\tclass WarbleFragment {\r\n\r\n\t\tconstructor(value) {\r\n\r\n\t\t\tthis.value = value;\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t\tthis.error = {};\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(name, param, parent) {\r\n\r\n\t\t\tvar response = typeof core.fn.validate[name] === 'function' ? core.fn.validate[name].call(parent, this.value, param) : true;\r\n\r\n\t\t\tif (!response || response instanceof WarbleErrorList) {\r\n\r\n\t\t\t\tthis.valid = false;\r\n\r\n\t\t\t\tthis.error[name] = true;\r\n\r\n\t\t\t\tif (response instanceof WarbleErrorList)\r\n\r\n\t\t\t\t\tfor (let index = 0, size = response.errors.length; index < size; index++)\r\n\r\n\t\t\t\t\t\tif (response.errors[index] !== name)\r\n\r\n\t\t\t\t\t\t\tthis.error[`${name}:${response.errors[index]}`] = true;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tdelete this.error[name];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass WarbleResponse {\r\n\r\n\t\tconstructor() {\r\n\r\n\t\t\tthis.response = {};\r\n\r\n\t\t\tthis.valid = true;\r\n\r\n\t\t\tthis.data = {};\r\n\r\n\t\t}\r\n\r\n\t\tsetResponse(index, value) {\r\n\r\n\t\t\tthis.response[index] = value;\r\n\r\n\t\t}\r\n\r\n\t\tsetData(index, value) {\r\n\r\n\t\t\tthis.data[index] = value;\r\n\r\n\t\t}\r\n\r\n\t\tsetValid(status) {\r\n\r\n\t\t\tthis.valid = status;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass WarbleModel {\r\n\r\n\t\tconstructor(model) {\r\n\r\n\t\t\tif (typeof model === 'object')\r\n\r\n\t\t\t\tthis.model = model;\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tthrow error('WarbleModel expects an object.');\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(data) {\r\n\r\n\t\t\tif (typeof data === 'object') {\r\n\r\n\t\t\t\tlet response = new WarbleResponse;\r\n\r\n\t\t\t\tfor (let index in this.model) {\r\n\r\n\t\t\t\t\tlet value = new WarbleFragment(data[index]);\r\n\r\n\t\t\t\t\tif (this.model[index] instanceof WarbleModel) {\r\n\r\n\t\t\t\t\t\tresponse.setResponse(index, this.model[index].validate(data[index]));\r\n\r\n\t\t\t\t\t} else if (typeof this.model[index] === 'object') {\r\n\r\n\t\t\t\t\t\tfor (let validation in this.model[index])\r\n\r\n\t\t\t\t\t\t\tif (!value.validate(validation, this.model[index][validation], data).valid)\r\n\r\n\t\t\t\t\t\t\t\tresponse.setValid(false);\r\n\r\n\t\t\t\t\t\tresponse.setResponse(index, value);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse.setData(index, value.value);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn response;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow error('WarbleModel.validate expects an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclass Warble extends WarbleCore {\r\n\r\n\t\tmodel(model) {\r\n\r\n\t\t\treturn new WarbleModel(model);\r\n\r\n\t\t}\r\n\r\n\t\tvalidate(value, options) {\r\n\r\n\t\t\tif (typeof options === 'object') {\r\n\r\n\t\t\t\tvar value = new WarbleFragment(value);\r\n\r\n\t\t\t\tfor (let index in options)\r\n\r\n\t\t\t\t\tvalue.validate(index, options[index]);\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t} else\r\n\r\n\t\t\t\tthrow error('Warble.validate expects an object.');\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar warble = new Warble;\r\n\r\n\tif (typeof module === 'object' && typeof module.exports === 'object')\r\n\r\n\t\tmodule.exports = warble;\r\n\r\n};\r\n"]}